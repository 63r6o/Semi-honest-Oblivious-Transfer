/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SemiHonestOT;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.Security;
import java.util.Scanner;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

import SemiHonestOT.Client.Sender;
import SemiHonestOT.Server.Receiver;

public class App {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the first secret message:");
        String message0 = scanner.nextLine();
        System.out.println("Enter the second secret message:");
        String message1 = scanner.nextLine();
        System.out.println("The receiver can learn only one of them, and the sender won't know which one");
        System.out.println("Which message do you want to read? Type 0 or 1:");
        boolean choiceBitBoolean = (scanner.nextInt() == 1) ? true : false;
        scanner.close();

        Sender sender = null;
        Receiver receiver = null;
        try {
            sender = new Sender(message0, message1);
            receiver = new Receiver();
        } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException e) {
            e.printStackTrace();
        }

        PublicKey[] publicKeys = receiver.getPublicKeys(choiceBitBoolean);
        byte[][] encryptedMessages = null;
        byte[][] decryptedMessages = null;
        try {
            encryptedMessages = sender.getEncrypted(publicKeys);
            decryptedMessages = receiver.decryptMessages(encryptedMessages);

        } catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            e.printStackTrace();
        }

        System.out.println("First message: " + new String(decryptedMessages[0]));
        System.out.println("Second message: " + new String(decryptedMessages[1]));

    }
}
